[transmogrifier]
pipeline =
    crawler
    cache
    typeguess
    drop
    template1
    template2
    template3
    template4
    templateauto
    indexguess
    titleguess
    attachmentguess
    hideguess
    urltidy
    addfolders
    changetype
    ploneupload
    ploneupdate
    publish
    plonepublish


[crawler]
blueprint = transmogrify.webcrawler
@doc = Crawls site or cache for content
@url = URL: the top url to crawl
@ignore = LIST: list of regex for urls to not crawl
@cache = HIDDEN:DIR: local directory to read crawled items from instead of accessing the site directly
@patterns = LIST: Regular expressions to substitute before html is parsed. New line seperated
@subs = LIST: Text to replace each item in patterns. Must be the same number of lines as patterns
@maxsize = BYTES: don't crawl anything larger than this
@max = INT: Limit crawling to this number of pages
@debug = HIDDEN:show extra debug information
#
# see http://pypi.python.org/pypi/transmogrify.webcrawler
#
url  = http://www.wikipedia.com
ignore =
	cgi-bin
	javascript:
	\?
cache = ${cache:output}


[cache]
blueprint = transmogrify.webcrawler.cache
#
@doc= Saves content to disk
# see http://pypi.python.org/pypi/transmogrify.webcrawler#cache
#
@output = HIDDEN:DIR: relative directory to store cached downloads
@debug = HIDDEN:show extra debug information
output = var/funnelwebcache/${crawler:url}/


[typeguess]
blueprint = transmogrify.webcrawler.typerecognitor
#
@doc = Sets Plone content type based on mime-type
# see http://pypi.python.org/pypi/transmogrify.webcrawler#TypeRecognitor
@condition = HIDDEN:TAL: Tal expression returning boolean called for each 'item'
@debug = HIDDEN:show extra debug information


[drop]
blueprint = collective.transmogrifier.sections.condition
#
@doc = Useful to drop certain content
# see http://pypi.python.org/pypi/collective.transmogrifier/#condition-section
@condition = TAL: TAL expression returning boolean called for each 'item'
@debug = HIDDEN:show extra debug information
condition: python:item.get('_mimetype') not in ['application/x-javascript','text/css','text/plain','application/x-java-byte-code'] and item.get('_path','').split('.')[-1] not in ['class']



[template1]
blueprint = transmogrify.htmlcontentextractor
#
@doc = Provide XPath for title, description, text etc.
 Specify rules like --template1:title="text //p[1]" --template1:text="html //p"
# see http://pypi.python.org/pypi/transmogrify.htmlcontentextractor
@debug = HIDDEN: show extra debug information
@title = LIST: text XPATH: extract title from page
title = text //mytitle
@description = LIST: text XPATH: extract description from page
description = text //mydescription
@body = LIST: html XPATH: Rules to pull html content out of page
body = html //mybody
@_delete1 = LIST: optional XPATH
_delete1 = optional //tagtoremove
# Note that spaces in XPaths must be escaped as &#32;
#
# See
#  http://www.w3schools.com/xpath/default.asp
#  http://blog.browsermob.com/2009/04/test-your-selenium-xpath-easily-with-firebug/
# for XPath info
#
# e.g.
# title = text //div[@class='body']//h1[1]
# delete1 = optional //div[@class='body']//a[@class='headerlink']
# delete2 =  optional //div[contains(@class,'admonition-description')]
# description = text //div[contains(@class,'admonition-description')]//p[@class='last']
# text = html //div[@class='body']
#

[template2]
blueprint = transmogrify.htmlcontentextractor
#
@doc = Used if no previous templates matched. see template1 for options
#
title = text //mytitle
description = text //mydescription
body = html //mybody

[template3]
blueprint = transmogrify.htmlcontentextractor
#
@doc = Used if no previous templates matched. see template1 for options
#
title = text //mytitle
description = text //mydescription
body = html //mybody

[template4]
blueprint = transmogrify.htmlcontentextractor
#
@doc = Used if no previous templates matched. see template1 for options
#
title = text //mytitle
description = text //mydescription
body = html //mybody


[templateauto]
blueprint = transmogrify.htmlcontentextractor.auto
#
@doc = Guesses XPaths of content by performing a cluster analysis of all the content not already matched
# see http://pypi.python.org/pypi/transmogrify.htmlcontentextractor@auto
#
@condition = TAL: A TAL expression returning boolean called for each 'item'. Turned off by default.
@debug = HIDDEN: show extra debug information

condition=python:False


[indexguess]
blueprint = transmogrify.siteanalyser.defaultpage
#
@doc = Determines an item is a default page for a container if it has many links
 to items in that container even if not contained in that folder
# see http://pypi.python.org/pypi/transmogrify.siteanalyser#defaultpage
#
@condition = TAL: tal expression returning boolean called for each 'item'
@debug = HIDDEN:show extra debug information
@min_links = INT: If a page has this many links to a single folder's content it will be moved
@max_uplinks = INT: If a page has more than this many links parent folders then don't more it

condition=python:False
min_links = 2
max_uplinks = 2



[titleguess]
blueprint = transmogrify.siteanalyser.title
#
@doc = Tries to find better page titles by analysing backlink text
#  see http://pypi.python.org/pypi/transmogrify.siteanalyser#title
#
@condition = TAL: TAL expression returning boolean called for each 'item'
@debug = HIDDEN:show extra debug information
@ignore = LIST: don't use backlink text containing these substrings
ignore =
	click
	read more
	close
	Close
	http:
	file:
	img
condition=python:False


[attachmentguess]
blueprint = transmogrify.siteanalyser.attach
#
@doc = Finds items only referenced by one page and moves them into a new folder with the page as the default view
# see http://pypi.python.org/pypi/transmogrify.siteanalyser#makeattachments
#
@condition = TAL: TAL expression returning boolean called for each 'item'
@debug = HIDDEN:show extra debug information
@defaultpage = NAME: name to give created defaultpages
#condition = python: subitem.get('_type') in ['Image']
condition=python:False
defaultpage = index-html


[hideguess]
blueprint = transmogrify.siteanalyser.hidefromnav
#
@doc = Picks content which won't be shown in the site navigation
@condition = TAL: TAL expression to pick which items should be hidden
@key = HIDDEN:
key = _exclude-from-navigation
condition = python:False


[urltidy]
blueprint = transmogrify.siteanalyser.relinker
#
@doc = Applies title normalisation rules remove invalid chars from urls. It will also ensure all internal links are corrected
@debug = HIDDEN: show extra debug information
@link_expr = TAL: TAL expression to set new value of the path
# see http://pypi.python.org/pypi/transmogrify.siteanalyser#relinker
#
link_expr = python:item['_path'].endswith('.html') and item['_path'][:-5] or item['_path']



[addfolders]
blueprint = transmogrify.pathsorter
@default_pages = LIST: names that indication page should be a defaultpage
@default_containers = TYPE: Type to set when creating folders
@debug = HIDDEN: show extra debug information
default_pages =
    index.html
    index
    index-html
default_containers = Folder


[changetype]
blueprint = collective.transmogrifier.sections.inserter
#
@doc = Switch the type of the created object if desired
#
@value = TAL: TAL expression to give the new value for the Type of object.
key = HIDDEN:
condition = HIDDEN:
key = string:_type
condition = python:item.get('_type')
value = python:item['_type']



[ploneupload]
blueprint = collective.transmogrifier.sections.constructor
@doc = Adds content to plone via xmlrpc
@type-key = HIDDEN:
@path-key = HIDDEN:
type-key = _type
path-key = _path

[ploneupdate]
blueprint = plone.app.transmogrifier.atschemaupdater
#
@doc = Updates content of existing object on a remote plone site via xmlrpc
# see http://pypi.python.org/pypi/transmogrify.ploneremote#remoteschemaupdater
@type-key = HIDDEN:
@path-key = HIDDEN:
type-key = _type
path-key = _path


[publish]
blueprint = collective.transmogrifier.sections.inserter
#
@doc = Set the workflow transition
#key hint which will be used publish the item.
# This value is later read by [plonepublish] and we can have conditions
# to have different WF transitions for different content types
# Note that images do not have workflow and they inherit
# permission settings of the parent container
#
@value = TAL: TAL expression to return the transition to workflow
@key = HIDDEN:
@condition = HIDDEN:
key = string:_transitions
value = python:["publish"]
condition = python:item.get('_type') != 'Image' and not options.get('disabled')


[plonepublish]
blueprint = plone.app.transmogrifier.workflowupdater
#
@doc= Publish or otherwise change the workflow state of remote plone content
# see http://pypi.python.org/pypi/transmogrify.ploneremote#remoteworkflowupdater
#
@transitions = HIDDEN:
@transitions-key = HIDDEN:
@type-key = HIDDEN:
@path-key = HIDDEN:
transitions = submit publish
transitions-key = _transitions
type-key = _type
path-key = _path


[browser-default]
blueprint = plone.app.transmogrifier.browserdefault
